---
- hosts: all
  become: yes

  tasks:

    # tasks file for install Java 1.8.0 to Debian systems
    - name: apt-get update
      apt:
        update_cache: yes

    - name: Upgrade all apt packages
      apt:
        upgrade: dist
        force_apt_get: yes

    - name: Install latest version of "openjdk-8-jdk" ignoring "install-recommends"
      apt:
        name: openjdk-8-jdk
        state: latest
        install_recommends: no

    - name: Just force systemd to reread configs
      systemd:
        daemon_reload: yes

    - name: Add git stable repository from PPA and install its signing key on Ubuntu target
      apt_repository:
        repo: ppa:git-core/ppa

    - name: apt-get update
      apt:
        update_cache: yes

    - name: Install the package "git"
      apt:
        name: git
        state: latest

    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools' ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        update_cache: yes
        name: docker-ce
        state: latest

    - name: user mode for docker and user vagrant
      shell: "usermod -aG docker vagrant"
      args:
        executable: /bin/bash

    # Edit lib/systemd/system/docker.service
    - name: comment ExecStart line in docker.service
      shell: "sed -i 's/^ExecStart/#&/' /lib/systemd/system/docker.service"
    # Add new line after commented
    - name: add new line
      shell: "sed -i '/^#ExecStart.*/iExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock\n' /lib/systemd/system/docker.service"

    - name: Just force systemd to reread configs and reload docker
      systemd:
        daemon_reload: yes
        state: restarted
        name: docker

    # Next Play : install jenkins Role
#- hosts: all
#  become: yes
#
#  roles:
#    - { role: geerlingguy.jenkins, when: ansible_system == 'Linux' }

    # Next Play : install jenkins plugins
#- hosts: all
#  become: yes
#
#  tasks:
#    - name: enable_some_VARIABLES
#      include_vars: vars.yml
#
#    - name: Download CLI jar
#      get_url:
#        url: "http://127.0.0.1:8080/jnlpJars/jenkins-cli.jar"
#        dest: "/opt/jenkins-cli.jar"
#
#    - name: install bunch of jenkins plugins
#      shell:
#        cmd: "java -jar /opt/jenkins-cli.jar -s http://127.0.0.1:8080/  -auth {{jenkins_admin_username}}:{{jenkins_admin_password}} install-plugin {{ item }}"
#      ignore_errors: yes
#      with_items: "{{ plugin_list }}"
#
#    - name: Restart Jenkins to make the plugin data available
#      service:
#        name: jenkins
#        state: restarted
#
#    - name: Wait for Jenkins to start up before proceeding.
#      uri:
#        url: "http://127.0.0.1:8080/cli/"
#        method: GET
#        return_content: "yes"
#        timeout: 5
#        body_format: raw
#        follow_redirects: "no"
#        status_code: 200,403
#      register: result
#      until: (result.status == 403 or result.status == 200) and (result.content.find("Please wait while") == -1)
#      retries: "70"
#      delay: "10"
#      changed_when: false
#      check_mode: false




